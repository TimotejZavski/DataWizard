@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    @using Newtonsoft.Json
}

    <style>
        body {
            font-family: Arial, sans-serif;
            height: 100vh;
            margin: 0;
            padding: 0;
        }

        .chat-container {
            max-width: 900px;
            margin: 50px auto;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            background-color: #007bff;
            color: white;
            padding: 10px;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            text-align:center;
        }

        .chat-messages {
            padding: 10px;
            height: 70vh;
            overflow-y: scroll;
        }

        .sender-message {
            align-self: flex-end;
            background-color: #007bff;
            color: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 10px;
        }

        .receiver-message {
            align-self: flex-start;
            background-color: #f4f4f4;
            color: black;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 10px;
        }

        .chat-input {
            display: flex;
            align-items: center;
            padding: 10px;
            border-top: 1px solid #ccc;
        }

            .chat-input input {
                flex: 1;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
                margin-right: 10px;
            }

            .chat-input button {
                background-color: #007bff;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                cursor: pointer;
            }

                .chat-input button:hover {
                    background-color: #0056b3;
                }

        table {
            width: auto;
            border-collapse: collapse;
            text-align: center;
        }

        th, td {
            border: 2px solid rgb(190, 217, 255);
            padding: 8px;
        }

        a {
            text-decoration: none;
        }

        img {
            border-radius: 5px;
        }

        .fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
        }

            .fullscreen img {
                max-width: 90%;
                max-height: 90%;
                object-fit: contain;
            }

    </style>

    

    <form method="post" enctype="multipart/form-data" asp-page-handler="UploadFile">
        <div class="chat-container">
            <div class="chat-header">
                <h1>v0.6.1</h1>
            </div>
            <div class="chat-messages">
                <div class="receiver-message">Upload your file (.csv)</div>
                <div class="sender-message">moji_podatki.csv</div>
                <div class="receiver-message">
                    Data Sample:
                    <table>
                        <tr>
                            <th>Age</th>
                            <th>Gender</th>
                            <th>TB</th>
                            <th>DB</th>
                            <th>Alkphos</th>
                            <th>Sgpt</th>
                            <th>Sgot</th>
                            <th>TP</th>
                            <th>ALB</th>
                            <th>A/G Ratio</th>
                            <th>Selector</th>
                        </tr>
                        <tr>
                            <td>65</td>
                            <td>Female</td>
                            <td>0.7</td>
                            <td>0.1</td>
                            <td>187</td>
                            <td>16</td>
                            <td>18</td>
                            <td>6.8</td>
                            <td>3.3</td>
                            <td>0.9</td>
                            <td>1</td>
                        </tr>
                        <tr>
                            <td>62</td>
                            <td>Male</td>
                            <td>10.9</td>
                            <td>5.5</td>
                            <td>699</td>
                            <td>64</td>
                            <td>100</td>
                            <td>7.5</td>
                            <td>3.2</td>
                            <td>0.74</td>
                            <td>1</td>
                        </tr>
                    </table>
                </div>
                <div class="receiver-message">Describe data atributes and data structure</div>
                <div class="sender-message">The dataset consists of 5 columns: 1. culmen_length_mm: culmen length (mm) 2. culmen_depth_mm: culmen depth (mm) 3. flipper_length_mm: flipper length (mm) 4. body_mass_g: body mass (g) 5. sex: penguin sex Some of sex columns are empty other are not</div>
                <div class="receiver-message">
                    <b>Recomendation based on sample data and description</b>
                    <ul>
                        <li><strong>1. <a href="">Scatter plot</a>:</strong> Plot culmen length (x-axis) against culmen depth (y-axis) to visualize the relationship between these two features.</li>
                        <li><strong>2. <a href="">Histogram</a>:</strong> Create histograms for flipper length and body mass to observe their distributions.</li>
                        <li><strong>3. <a href="">Bar chart</a>:</strong> Generate a bar chart to display the distribution of penguin sexes (male, female, and possibly missing values).</li>
                    </ul>
                    What would you like to generate?
                </div>
                <div class="sender-message"><strong>2. <a href="">Histogram</a>:</strong> Create histograms for flipper length and body mass to observe their distributions.</div>
                <div class="receiver-message">
                    <div class="image-container">
                        Histogram of body mass distribution<br>
                        <img src="~/images/body_masses.png" alt="Image" width="60%" height="auto" style="object-fit: cover; cursor: zoom-in;" onclick="openFullScreen('~/images/body_masses.png')" />
                    </div> <br>
                    <div class="image-container">
                        Histogram of flipper length distribution<br>
                        <img src="~/images/flipper_lengths.png" alt="Image" width="60%" height="auto" style="object-fit: cover; cursor: zoom-in;" onclick="openFullScreen('~/images/flipper_lengths.png')" />
                    </div>
                </div>




                <!-- Add more messages with appropriate classes for sender or receiver -->
            </div>
            <div class="chat-input">
                <input type="text" placeholder="Type your message...">
                <button type="button">Send</button>
            </div>
        </div>


        @*za table bo uporabno*@
        @if (TempData["Message"] != null)
        {
            var json = TempData["JsonData"] as string;
            var data = JsonConvert.DeserializeObject<List<dynamic>>(json);
            <h2>Content of file (sample) - 5 rows:</h2>
            <div class="card_table" style="width: clamp(25rem, calc(20rem + 2vw));">

                <table class="table">
                    <thead>
                        <tr>
                            @foreach (var property in data[0].Properties())
                            {
                                <th>@property.Name</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in data)
                        {
                            <tr>
                                @foreach (var property in item.Properties())
                                {
                                    <td>@property.Value</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>

            </div>

        }
    </form>

    <br>
    <br>
    <br>


